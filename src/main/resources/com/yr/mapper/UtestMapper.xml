<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yr.mapper.UtestMapper" >
  <resultMap id="BaseResultMap" type="com.yr.pojo.Utest" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>

  <!-- mybatis 对于简单的 单标查询 使用 resultType 即可解决
  对于 多表联合查询，要使用 resultMap 进行详细的描述
  告诉 mybatis 如何对查询的结果进行封装
  resultMap 可继承
  测试类 ：testForSql m1
  -->
  <resultMap id="userbaseMap" type="com.yr.pojo.UtestWithUdetails">
    <!-- Utest 基本信息-->
    <id property="id" column="uid"/>
    <result property="password" column="password"/>
    <result property="phone" column="phone"/>
    <result property="status" column="status"/>
  </resultMap>

  <!--封装方式1
   测试类 ：testForSql m1
   -->
  <resultMap id="UtestWithDetails" type="com.yr.pojo.UtestWithUdetails">
  <!-- Utest 基本信息-->
    <id property="id" column="uid"/>
    <result property="password" column="password"/>
    <result property="phone" column="phone"/>
    <result property="status" column="status"/>
  <!--封装 Udetails 类
  对于 1:1 关系，使用 association 标签-->
    <association property="udetails" javaType="com.yr.pojo.Udetails">
      <id property="id" column="udId"/>
      <result property="nickname" column="nickname"/>
      <result property="address" column="address"/>
    </association>
  </resultMap>

  <!--封装方式2
   测试类 ：testForSql m1
   -->
  <resultMap id="UtestWithDetails2" type="com.yr.pojo.UtestWithUdetails">
    <!-- Utest 基本信息-->
    <id property="id" column="uid"/>
    <result property="password" column="password"/>
    <result property="phone" column="phone"/>
    <result property="status" column="status"/>
    <result property="udetails.id" column="udId"/>
    <result property="udetails.address" column="address"/>
    <result property="udetails.nickname" column="nickname"/>
  </resultMap>

  <select id="findByid" resultMap="UtestWithDetails2">
    SELECT t1.id as uid,t1.phone,t1.password,t1.status,t2.id as udId,t2.address,t2.nickname
    from u t1,u_details t2
    <where>
      t1.id=t2.u_id
      and t1.id=#{id}
    </where>
  </select>



  <!--封装方式3
      分步查询，对于过于复杂的查询，推荐使用分步查询
      在 association 中调用其他 mapper 中的方法
       测试类 ：testForSql m2
  -->
  <resultMap id="UtestWithDetails3" extends="userbaseMap" type="com.yr.pojo.UtestWithUdetails">
    <association property="udetails" select="com.yr.mapper.UdetailsMapper.findByUid" column="uid">

    </association>
  </resultMap>
  <select id="findByidBystep" resultMap="UtestWithDetails3">
    SELECT t1.id as uid,t1.phone,t1.password,t1.status
    from u t1
    <where>
      t1.id=#{id}
    </where>
  </select>

  <!--
  根据用户的id查询该用户的信息以及发布的所有博客以及博客下所有评论
  用户与博客之间是 1：n 的关系
  博客与评论之间是 1：n 的关系
  测试类 ：testForSql m3
  -->
  <resultMap id="UtestWithBlog" extends="userbaseMap" type="com.yr.pojo.UtestWithBlog">
  <!--  封装 blog 1:n 关系，用 collection 描述集合
  ofType 描述集合中元素-->
    <collection property="blogList" ofType="com.yr.pojo.Blog">
      <id property="id" column="bid"/>
      <result property="title" column="title"/>
      <result property="summary" column="summary"/>
      <!--封装 评论-->
      <collection property="commentList" ofType="com.yr.pojo.Comment">
        <id property="id" column="cid"/>
        <result property="content" column="content"/>
      </collection>
    </collection>
  </resultMap>
  <select id="findByidWithBlog" resultMap="UtestWithBlog">
    SELECT
    t1.id as uid ,t1.password,t1.phone,t1.status,
    t2.id as bid , t2.title,t2.summary,
    t3.id cid ,t3.content
    from  u t1,blog t2,comment t3
    where t1.id=t2.u_id
    and t2.id=t3.b_id
    and t1.id=#{id}
  </select>
</mapper>